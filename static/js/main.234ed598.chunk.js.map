{"version":3,"sources":["ItemTypes.ts","Boxy.tsx","ListItems.tsx","BoxyDragLayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemTypes","style","border","backgroundColor","padding","marginRight","marginBottom","Boxy","_ref","id","name","type","accept","onChange","children","selectedCount","item","ref","useRef","_useDrag","useDrag","end","dropResult","monitor","didDrop","dragSource","canDrag","collect","opacity","isDragging","_useDrag2","Object","slicedToArray","drag","preview","_useDrop","useDrop","drop","dragObject","dropTarget","canDrop","isOver","_useDrop2","_useDrop2$","useEffect","getEmptyImage","captureDraggingState","react_default","a","createElement","objectSpread","position","width","height","textAlign","display","marginLeft","visibility","ListItems","selectionData","list","setSelectionData","Fragment","map","index","key","margin","checked","value","defineProperty","target","layerStyles","pointerEvents","zIndex","left","top","getItemStyles","initialOffset","currentOffset","offset","_x$y","x","y","transform","concat","WebkitTransform","BoxyDragLayer","props","_useDragLayer","useDragLayer","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","clientOffset","getClientOffset","BOX","color","sort","data","item1","item2","initialSelection","initialList","App","_useState","useState","_useState2","logs","setLogs","_useState3","_useState4","lists","setLists","_useState5","_useState6","selection","setSelection","selectedItems","filter","listItem","toConsumableArray","lib","backend","HTML5Backend","BoxyDragLayer_BoxyDragLayer","Boxy_Boxy","keys","length","ListItems_ListItems","clear","log","i","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.234ed598.chunk.js","sourcesContent":["export enum ItemTypes {\n    BOX = \"BOX\",\n}\n","/* eslint-disable */\nimport React, { useRef, useEffect } from \"react\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport {\n    useDrag,\n    useDrop,\n    // DragObjectWithType,\n    DropTargetMonitor,\n    DragSourceMonitor\n} from \"react-dnd\";\nimport { IdType } from \"./ListItems\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\n\nconst style: React.CSSProperties = {\n    border: \"1px dashed gray\",\n    backgroundColor: \"white\",\n    padding: \"0.5rem 1rem\",\n    marginRight: \"1.5rem\",\n    marginBottom: \"1.5rem\",\n};\n\nexport interface ChangeEvent {\n    dragSource: BoxyBox;\n    dropTarget?: BoxyBox;\n}\n\nexport interface BoxProps {\n    id: IdType;\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n    onChange(event: ChangeEvent): void;\n    selectedCount: number;\n}\n\ninterface BoxyBox {\n    id: any;\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n}\n\nexport const Boxy: React.FC<BoxProps> = ({ id, name, type, accept, onChange, children, selectedCount }) => {\n    const item: BoxyBox = { id, type, name, accept };\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ opacity }, drag, preview] = useDrag({\n        item,\n        end(dropResult: BoxyBox | undefined, monitor: DragSourceMonitor) {\n            if (!monitor.didDrop()) {\n                typeof onChange === \"function\" && onChange({ dragSource: item });\n            }\n            // console.log(\"drag end\", dropResult, monitor);\n        },\n        canDrag: (monitor: DragSourceMonitor) => selectedCount > 0,\n        collect: (monitor: any) => ({\n            opacity: monitor.isDragging() ? 0.4 : 1\n        })\n    });\n\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept,\n        drop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            // console.log();\n            typeof onChange === \"function\" && onChange({ dragSource: dragObject, dropTarget: item });\n            // console.log(\"drop\", dragObject, monitor);\n        },\n        canDrop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            if (item.id === dragObject.id) return false;\n            return true;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop()\n        })\n    });\n\n    drag(drop(ref));\n    \n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    return (\n        <div\n            ref={ref}\n            style={{\n                ...style,\n                opacity,\n                position: \"relative\",\n                backgroundColor:\n                    isOver && canDrop ? \"cornflowerblue\" : canDrop ? \"skyblue\" : \"white\"\n            }}\n        >\n            <div>\n                {name}\n                <span\n                        // ref={preview}\n                        style={{\n                            padding: \"3px\",\n                            width: \"1em\",\n                            height: \"1em\",\n                            textAlign: \"center\",\n                            display: \"inline-block\",\n                            marginLeft: \"3px\",\n                            visibility: selectedCount > 0 ? \"visible\" : \"hidden\",\n                            border: \"1px solid darkgrey\"\n                        }}\n                    >\n                        {selectedCount}\n                    </span>\n            </div>\n            {children}\n        </div >\n    );\n};\n","/* eslint-disable */\nimport React, { FC } from \"react\";\n\nexport type IdType = number | string;\n\nexport interface IListItemData {\n    name: string;\n}\n\nexport interface IListItem {\n    id: IdType;\n    name: string;\n    data: IListItemData[];\n}\n\nexport interface ISelectionData { [key: string]: boolean; };\n\nexport interface IItemSelection {\n    id: IdType;\n    data: ISelectionData;\n}\n\ninterface IListItemsProps {\n    list: IListItemData[];\n    selectionData: ISelectionData;\n    setSelectionData(selectionData: ISelectionData): void;\n}\n\nexport const ListItems: FC<IListItemsProps> = ({ selectionData, list, setSelectionData }) => {\n    const onChange = (index: number, value: React.ChangeEvent<HTMLInputElement>) => {\n        setSelectionData({ ...selectionData, [index]: value.target.checked });\n    }\n\n    return (\n        <>\n            {list.map((item, index) => {\n                return (\n                    <label\n                        key={index}\n                        style={{\n                            backgroundColor: selectionData[index] === true ? \"salmon\" : \"white\",\n                            margin: \"3px\",\n                            padding: \"3px\",\n                            display: \"block\"\n                        }}\n                    >\n                        <input\n                            checked={selectionData[index] === true}\n                            onChange={(checked) => onChange(index, checked)}\n                            style={{ marginRight: \"6px\" }}\n                            type=\"checkbox\"\n                        />\n                        {item.name}\n                    </label>\n                )\n            })}\n        </>\n    )\n}","/* eslint-disable */\nimport React, { FC } from \"react\";\nimport { XYCoord, useDragLayer } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst layerStyles: React.CSSProperties = {\n    position: \"fixed\",\n    pointerEvents: \"none\",\n    zIndex: 100,\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\n\nfunction getItemStyles(\n    initialOffset: XYCoord | null,\n    currentOffset: XYCoord | null,\n    offset: XYCoord | null\n) {\n    if (!initialOffset || !currentOffset || !offset) {\n        return {\n            display: \"none\"\n        };\n    }\n\n    // let { x, y } = currentOffset;\n\n    let { x, y } = {\n        x: offset.x + 10,\n        y: offset.y + 10\n    };\n\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform\n    };\n}\n\nexport const BoxyDragLayer: FC = props => {\n    const {\n        isDragging,\n        itemType,\n        item,\n        initialOffset,\n        currentOffset,\n        clientOffset\n    } = useDragLayer(monitor => {\n        return {\n            item: monitor.getItem(),\n            itemType: monitor.getItemType(),\n            initialOffset: monitor.getInitialSourceClientOffset(),\n            currentOffset: monitor.getSourceClientOffset(),\n            isDragging: monitor.isDragging(),\n            clientOffset: monitor.getClientOffset()\n        };\n    });\n\n    if ((item && item.type) !== ItemTypes.BOX) { return null }\n\n    return (\n        <div style={layerStyles}>\n            <div\n                style={{\n                    display: \"inline-block\",\n                    ...getItemStyles(initialOffset, currentOffset, clientOffset),\n                    backgroundColor: \"blueviolet\",\n                    color: \"whitesmoke\",\n                    padding: \"10px\"\n                }}\n            >\n                <div>My drag layer: {item && item.name}</div>\n            </div>\n        </div>\n    );\n};","/* eslint-disable */\nimport React, { FC, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { Boxy, ChangeEvent } from \"./Boxy\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport { IListItem, ListItems, IItemSelection, IdType, IListItemData } from \"./ListItems\";\nimport { BoxyDragLayer } from \"./BoxyDragLayer\";\n\nconst sort = (data: IListItemData[]) => {\n    return data.sort((item1, item2) => item1.name[0] > item2.name[0] ? 1 : -1)\n}\n\nconst initialSelection: IItemSelection = {\n    id: -1,\n    data: {},\n};\n\nconst initialList: IListItem[] = [\n    {\n        id: 100,\n        name: \"Boxy 1\",\n        data: sort([\n            { name: \"Popescu\" },\n            { name: \"Ionescu\" },\n            { name: \"Petrescu\" },\n        ])\n    },\n    {\n        id: 200,\n        name: \"Boxy 2\",\n        data: sort([\n            { name: \"Constantinescu\" },\n            { name: \"Eminescu\" },\n        ])\n    },\n    {\n        id: 300,\n        name: \"Boxy 3\",\n        data: sort([\n            { name: \"Hutinescu\" },\n            { name: \"Adamescu\" },\n            { name: \"Iliescu\" },\n            { name: \"Klaus\" },\n        ])\n    },\n];\n\nconst App: FC = () => {\n    const [logs, setLogs] = useState<string[]>([]);\n\n    const [lists, setLists] = useState<IListItem[]>(initialList);\n\n    const [selection, setSelection] = useState<IItemSelection>(initialSelection);\n\n    const onChange = ({ dragSource, dropTarget }: ChangeEvent) => {\n        if (dropTarget == null) {\n            setLogs([...logs, `did not drop ${dragSource.name} on any target`])\n            return;\n        }\n\n        const selectedItems = lists\n            .filter(listItem => listItem.id === dragSource.id)[0]\n            .data\n            .filter((list, index) => selection.data[index] === true);\n\n        setLists(lists.map(listItem => {\n            if (listItem.id === dropTarget.id) {\n                return ({\n                    ...listItem,\n                    id: listItem.id,\n                    data: sort([\n                        ...listItem.data,\n                        ...selectedItems,\n                    ]),\n                })\n            }\n            if (listItem.id === dragSource.id) {\n                return ({\n                    ...listItem,\n                    id: listItem.id,\n                    data: listItem.data.filter((listItem, index) => selection.data[index] !== true),\n                })\n            }\n            return listItem\n        }));\n        setSelection(initialSelection)\n        setLogs([...logs, `dropped ${dragSource.name} on ${dropTarget.name}`]);\n    }\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <BoxyDragLayer />\n            <div style={{ display: \"flex\" }}>\n                {lists.map((list, index) =>\n                    <Boxy\n                        key={index}\n                        id={list.id}\n                        onChange={onChange}\n                        accept={[ItemTypes.BOX]}\n                        type={ItemTypes.BOX}\n                        name={list.name}\n                        selectedCount={\n                            selection.id === list.id\n                                ? Object.keys(selection.data).filter(key => selection.data[key] === true).length\n                                : 0}\n                    >\n                        <ListItems\n                            list={list.data}\n                            selectionData={selection.id === list.id ? selection.data : {}}\n                            setSelectionData={(selectionData) => setSelection({ id: list.id, data: selectionData })}\n                        />\n                    </Boxy>\n                )}\n            </div>\n            <div style={{ clear: \"both\" }}>\n                {logs.map((log, i) => <div key={i} style={{ padding: \"5px 0\" }}>{log}</div>)}\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}